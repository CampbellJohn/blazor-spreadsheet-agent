@page "/file-upload"
@using blazor_spreadsheet_agent.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.IO
@inject SpreadsheetService SpreadsheetService
@inject FileProcessingService FileProcessingService
@inject NavigationManager NavigationManager
@inject ILogger<FileUpload> Logger

<PageTitle>Upload Spreadsheet</PageTitle>

<h1>Upload Spreadsheet</h1>


<div class="row">
    <div class="col-md-8">
        <EditForm Model="@uploadModel" OnValidSubmit="HandleValidSubmit" class="needs-validation" novalidate>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />
            
            <div class="mb-3">
                <label for="fileInput" class="form-label">Select file (XLSX, CSV, XLS)</label>
                <InputFile id="fileInput" class="form-control" OnChange="OnInputFileChange" accept=".xlsx,.xls,.csv" />
                <div class="form-text">
                    Maximum file size: 10MB. Supported formats: .xlsx, .xls, .csv
                </div>
                <ValidationMessage For="@(() => uploadModel.File)" class="text-danger" />
            </div>
            
            <div class="mb-3">
                <label for="description" class="form-label">Description (Optional)</label>
                <InputTextArea id="description" @bind-Value="uploadModel.Description" class="form-control" rows="3" />
                <ValidationMessage For="@(() => uploadModel.Description)" class="text-danger" />
            </div>
            
            <div class="mb-3 form-check">
                <InputCheckbox id="hasHeaders" @bind-Value="uploadModel.HasHeaders" class="form-check-input" />
                <label class="form-check-label" for="hasHeaders">First row contains headers</label>
            </div>
            
            <div class="d-flex justify-content-between">
                <button type="button" class="btn btn-outline-secondary" @onclick="NavigateToHome">
                    <i class="bi bi-arrow-left"></i> Back to Home
                </button>
                <button type="submit" class="btn btn-primary" disabled="@isUploading">
                    @if (isUploading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Uploading...</span>
                    }
                    else
                    {
                        <i class="bi bi-upload"></i>
                        <span>Upload</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Upload Instructions</h5>
            </div>
            <div class="card-body">
                <ul class="list-unstyled">
                    <li class="mb-2"><i class="bi bi-check-circle-fill text-success me-2"></i> Ensure your file has an email column</li>
                    <li class="mb-2"><i class="bi bi-check-circle-fill text-success me-2"></i> Include only rows with qualified leads</li>
                    <li class="mb-2"><i class="bi bi-check-circle-fill text-success me-2"></i> Check that headers are in the first row</li>
                    <li class="mb-2"><i class="bi bi-check-circle-fill text-success me-2"></i> If sending more than 100 leads please alert Eloqua Admin</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(uploadStatus))
{
    <div class="alert @(uploadStatus.Contains("success") ? "alert-success" : "alert-danger") mt-3">
        @uploadStatus
    </div>
}

@code {
    private UploadModel uploadModel = new();
    private string uploadStatus = string.Empty;
    private bool isUploading = false;
    private IBrowserFile? selectedFile;

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private class UploadModel
    {
        [Required(ErrorMessage = "Please select a file to upload")]
        public IBrowserFile? File { get; set; }
        
        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string? Description { get; set; }
        
        public bool HasHeaders { get; set; } = true;
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;
            uploadModel.File = selectedFile;
            uploadStatus = string.Empty;
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error selecting file");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (selectedFile == null) return;
        
        isUploading = true;
        uploadStatus = string.Empty;
        
        try
        {
            // Validate file type
            var allowedExtensions = new[] { ".xlsx", ".xls", ".csv" };
            var fileExtension = Path.GetExtension(selectedFile.Name).ToLower();
            
            if (!allowedExtensions.Contains(fileExtension))
            {
                uploadStatus = "Error: Only .xlsx, .xls, and .csv files are allowed.";
                return;
            }
            
            // Validate file size (10MB max)
            const int maxFileSize = 10 * 1024 * 1024; // 10MB
            if (selectedFile.Size > maxFileSize)
            {
                uploadStatus = "Error: File size exceeds the maximum limit of 10MB.";
                return;
            }
            
            // Read file content
            using var stream = selectedFile.OpenReadStream(maxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            
            // Create spreadsheet record
            var spreadsheet = await SpreadsheetService.UploadSpreadsheetAsync(
                selectedFile.Name,
                selectedFile.ContentType,
                selectedFile.Size,
                uploadModel.Description);
                
            // Process the file based on its type
            bool processSuccess;
            
            if (fileExtension == ".csv")
            {
                processSuccess = await ProcessCsvFileAsync(memoryStream, spreadsheet.Id);
            }
            else // Excel files (.xlsx, .xls)
            {
                processSuccess = await ProcessExcelFileAsync(memoryStream, spreadsheet.Id);
            }
            
            if (processSuccess)
            {
                uploadStatus = "File uploaded and processed successfully!";
                // Reset the form
                uploadModel = new();
                selectedFile = null;
            }
            else
            {
                uploadStatus = "Error: Failed to process the file. Please check the file format and try again.";
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error uploading file");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
    
    private async Task<bool> ProcessCsvFileAsync(MemoryStream fileStream, int spreadsheetId)
    {
        try
        {
            fileStream.Position = 0; // Reset stream position
            return await FileProcessingService.ProcessCsvFileAsync(fileStream, spreadsheetId, uploadModel.HasHeaders);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing CSV file");
            uploadStatus = $"Error processing CSV file: {ex.Message}";
            return false;
        }
    }
    
    private async Task<bool> ProcessExcelFileAsync(MemoryStream fileStream, int spreadsheetId)
    {
        try
        {
            fileStream.Position = 0; // Reset stream position
            return await FileProcessingService.ProcessExcelFileAsync(fileStream, spreadsheetId, uploadModel.HasHeaders);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing Excel file");
            uploadStatus = $"Error processing Excel file: {ex.Message}";
            return false;
        }
    }
}
